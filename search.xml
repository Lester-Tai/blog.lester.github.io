<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>知其所以然 - Configuration和Component的区别</title>
      <link href="/blogs/2021/01/09/%E7%9F%A5%E5%85%B6%E6%89%80%E4%BB%A5%E7%84%B6-Configuration%E5%92%8CComponent%E7%9A%84%E5%8C%BA%E5%88%AB/"/>
      <url>/blogs/2021/01/09/%E7%9F%A5%E5%85%B6%E6%89%80%E4%BB%A5%E7%84%B6-Configuration%E5%92%8CComponent%E7%9A%84%E5%8C%BA%E5%88%AB/</url>
      
        <content type="html"><![CDATA[<p>@Configuration 和 @Component是我们常用的2个注解，当2个注解作用于Config上都能够完成注入功能</p><p>我们先从注解本身来看两者的区别:</p><p>从代码上不难看出@Configuration的本质也是一个@Component，只是基于它作了一些扩展</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Target(ElementType.TYPE)</span></span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> Configuration &#123;</span><br><span class="line"><span class="meta">@AliasFor(annotation = Component.class)</span></span><br><span class="line"><span class="function">String <span class="title">value</span><span class="params">()</span> <span class="keyword">default</span> &quot;&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">boolean</span> <span class="title">proxyBeanMethods</span><span class="params">()</span> <span class="keyword">default</span> <span class="keyword">true</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Target(ElementType.TYPE)</span></span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="meta">@Indexed</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> Component &#123;</span><br><span class="line"><span class="function">String <span class="title">value</span><span class="params">()</span> <span class="keyword">default</span> &quot;&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="应用差异"><a href="#应用差异" class="headerlink" title="应用差异"></a>应用差异</h2><p>光看注解我们并看不出有和区别，接下来我用2个例子来表述它们在应用过程中的具体差异</p><p>例1:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="comment">//@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestConfig</span> </span>&#123;</span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Demo <span class="title">demo</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> Demo();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> DemoFactory <span class="title">demoFactory</span><span class="params">()</span> </span>&#123;</span><br><span class="line">DemoFactory demoFactory= <span class="keyword">new</span> DemoFactory();</span><br><span class="line">demoFactory.setDemo(demo());</span><br><span class="line"><span class="keyword">return</span> demoFactory;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>再来一个测试类来进行测试</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span> </span>&#123;</span><br><span class="line">AnnotationConfigApplicationContext applicationContext= <span class="keyword">new</span> AnnotationConfigApplicationContext(TestConfig.class);</span><br><span class="line">Demo demo= applicationContext.getBean(Demo.class);</span><br><span class="line">DemoFactory demoFactory= applicationContext.getBean(DemoFactory.class);</span><br><span class="line"></span><br><span class="line">System.out.println(demo.hashCode());</span><br><span class="line">System.out.println(demoFactory.getDemo().hashCode());</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>基于@Component注解的作用下 我们所拿到的值是不同的</p><p>基于@Configuration注解的作用下 我们所拿到的值是相同的</p><p>同样的 我们再来看一段代码</p><p>例2:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="comment">//@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test2Config</span> </span>&#123;</span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Demo2 <span class="title">demo2</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> Demo2();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> DemoFactory <span class="title">demoFactory</span><span class="params">()</span> </span>&#123;</span><br><span class="line">DemoFactory demoFactory= <span class="keyword">new</span> DemoFactory();</span><br><span class="line">Demo2 demo2= demo2();</span><br><span class="line">demoFactory.setDemo3( (Demo3) demo2.getObject());</span><br><span class="line"><span class="keyword">return</span> demoFactory;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo2</span> <span class="keyword">implements</span> <span class="title">FactoryBean</span> </span>&#123;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Object <span class="title">getObject</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> Demo3();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> Class&lt;?&gt; getObjectType() &#123;</span><br><span class="line"><span class="keyword">return</span> Demo3.class;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试类我就省略了和上面的一样</p><p>结论也是一样的</p><h2 id="如何实现"><a href="#如何实现" class="headerlink" title="如何实现"></a>如何实现</h2><p>通过这2个例子我们来思考2个问题</p><ol><li>为什么Configuration要这样设计，为什么它返回的结果是对象本身而Component确实一个新的对象</li><li>Configuration是如何来实现这个功能的</li></ol><h3 id="我们先来思考第一个问题"><a href="#我们先来思考第一个问题" class="headerlink" title="我们先来思考第一个问题"></a>我们先来思考第一个问题</h3><p>我们都知道在Spring中有一个非常重要的思想那就是单例，在正常情况下我们的项目使用的都是单例来完成的，如果说使用Component的方式来完成那就违背了这一准则，说白了在实例化的时候，我们从Factory中获取出来的对象 和 Spring管理的Bean并不是同一个对象可以吗？显然是否定的，拿一个例子来说明</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="meta">@ConditionalOnMissingBean(name = &quot;redisTemplate&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> RedisTemplate&lt;Object, Object&gt; <span class="title">redisTemplate</span><span class="params">(RedisConnectionFactory redisConnectionFactory)</span></span></span><br><span class="line"><span class="function"><span class="keyword">throws</span> UnknownHostException </span>&#123;</span><br><span class="line">RedisTemplate&lt;Object, Object&gt; template = <span class="keyword">new</span> RedisTemplate&lt;&gt;();</span><br><span class="line">template.setConnectionFactory(redisConnectionFactory);</span><br><span class="line"><span class="keyword">return</span> template;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这段代码是Spring装配Redis模版的代码，如果说我们对Redis的信息在connectionFactory发生了变化那么基于Component的方式它是无法感知到的，因为它们共用的并不是一个实体，所以以单例的方式拿到一个共享对象是非常重要的</p><h3 id="我们再来看看第二个问题"><a href="#我们再来看看第二个问题" class="headerlink" title="我们再来看看第二个问题"></a>我们再来看看第二个问题</h3><p>那么Spring到底是如何实现的，其实大家都不需要去想就能直接了当的说出答案<strong>代理</strong>，为什么呢？很显然当我们的类试图去拿被@Bean所装饰的方法时，它会先从缓存中去获取对象，这不就是一个典型的<strong>代理模式</strong>吗</p><p>不信？让我们来看看源码</p><p>首先我们需要了解@Configuration的注解Spring是在哪里进行处理的，从名字就能看出来当然是<strong>ConfigurationClassPostProcessor</strong>，好我们看到处理的方法<code>postProcessBeanFactory</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">postProcessBeanFactory</span><span class="params">(ConfigurableListableBeanFactory beanFactory)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> factoryId = System.identityHashCode(beanFactory);</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">this</span>.factoriesPostProcessed.contains(factoryId)) &#123;</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(<span class="string">&quot;postProcessBeanFactory already called on this post-processor against &quot;</span> + beanFactory);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">this</span>.factoriesPostProcessed.add(factoryId);</span><br><span class="line"><span class="keyword">if</span> (!<span class="keyword">this</span>.registriesPostProcessed.contains(factoryId)) &#123;</span><br><span class="line">processConfigBeanDefinitions((BeanDefinitionRegistry) beanFactory);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//生成代理对象</span></span><br><span class="line">enhanceConfigurationClasses(beanFactory);</span><br><span class="line">beanFactory.addBeanPostProcessor(<span class="keyword">new</span> ImportAwareBeanPostProcessor(beanFactory));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个方法中有个非常醒目的方法<code>enhanceConfigurationClasses</code>，看名字就知道是cglib的动态代理</p><p>我们再来看看这个方法里面生成代理的类<strong>ConfigurationClassEnhancer</strong>，这个类中有个非常重要的方法<code>enhance</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> Class&lt;?&gt; enhance(Class&lt;?&gt; configClass, <span class="meta">@Nullable</span> ClassLoader classLoader) &#123;</span><br><span class="line"><span class="keyword">if</span> (EnhancedConfiguration.class.isAssignableFrom(configClass)) &#123;</span><br><span class="line"><span class="keyword">if</span> (logger.isDebugEnabled()) &#123;</span><br><span class="line">logger.debug(String.format(<span class="string">&quot;Ignoring request to enhance %s as it has &quot;</span> +</span><br><span class="line"><span class="string">&quot;already been enhanced. This usually indicates that more than one &quot;</span> +</span><br><span class="line"><span class="string">&quot;ConfigurationClassPostProcessor has been registered (e.g. via &quot;</span> +</span><br><span class="line"><span class="string">&quot;&lt;context:annotation-config&gt;). This is harmless, but you may &quot;</span> +</span><br><span class="line"><span class="string">&quot;want check your configuration and remove one CCPP if possible&quot;</span>,</span><br><span class="line">configClass.getName()));</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> configClass;</span><br><span class="line">&#125;</span><br><span class="line">Class&lt;?&gt; enhancedClass = createClass(newEnhancer(configClass, classLoader));</span><br><span class="line"><span class="keyword">if</span> (logger.isTraceEnabled()) &#123;</span><br><span class="line">logger.trace(String.format(<span class="string">&quot;Successfully enhanced %s; enhanced class name is: %s&quot;</span>,</span><br><span class="line">configClass.getName(), enhancedClass.getName()));</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> enhancedClass;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> Enhancer <span class="title">newEnhancer</span><span class="params">(Class&lt;?&gt; configSuperClass, <span class="meta">@Nullable</span> ClassLoader classLoader)</span> </span>&#123;</span><br><span class="line">Enhancer enhancer = <span class="keyword">new</span> Enhancer();</span><br><span class="line"><span class="comment">//需要增强的类，这边的configSuperClass实际上就是带有@Configuration注解的类</span></span><br><span class="line">enhancer.setSuperclass(configSuperClass);</span><br><span class="line">enhancer.setInterfaces(<span class="keyword">new</span> Class&lt;?&gt;[] &#123;EnhancedConfiguration.class&#125;);</span><br><span class="line">enhancer.setUseFactory(<span class="keyword">false</span>);</span><br><span class="line">enhancer.setNamingPolicy(SpringNamingPolicy.INSTANCE);</span><br><span class="line">enhancer.setStrategy(<span class="keyword">new</span> BeanFactoryAwareGeneratorStrategy(classLoader));</span><br><span class="line"><span class="comment">//回调过滤器</span></span><br><span class="line">enhancer.setCallbackFilter(CALLBACK_FILTER);</span><br><span class="line"><span class="comment">//回调方法</span></span><br><span class="line">enhancer.setCallbackTypes(CALLBACK_FILTER.getCallbackTypes());</span><br><span class="line"><span class="keyword">return</span> enhancer;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这就是标准的cglib，对方法进行增强，这里补充一下Callback的回调方法总共有3个</p><ul><li>BeanMethodInterceptor</li></ul><p>对带有@Bean注解的方法的增强</p><ul><li>BeanFactoryAwareMethodInterceptor</li></ul><p>对实现了BeanFactoryAware接口的类中setBeanFactory方法的增强</p><ul><li>NoOp.INSTANCE</li></ul><p>不做任何处理</p><p>既然已经生成了代理，那么接下来就是在代理中作了哪些处理，让我们一起来看看<strong>BeanMethodInterceptor</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//只有当@Bean的方法是被Spring调到的时候, 才会走下来</span></span><br><span class="line"><span class="keyword">if</span> (isCurrentlyInvokedFactoryMethod(beanMethod)) &#123;</span><br><span class="line"><span class="keyword">if</span> (logger.isInfoEnabled() &amp;&amp; BeanFactoryPostProcessor.class.isAssignableFrom(beanMethod.getReturnType())) &#123;</span><br><span class="line">logger.info(String.format(<span class="string">&quot;@Bean method %s.%s is non-static and returns an object &quot;</span> +</span><br><span class="line"><span class="string">&quot;assignable to Spring&#x27;s BeanFactoryPostProcessor interface. This will &quot;</span> +</span><br><span class="line"><span class="string">&quot;result in a failure to process annotations such as @Autowired, &quot;</span> +</span><br><span class="line"><span class="string">&quot;@Resource and @PostConstruct within the method&#x27;s declaring &quot;</span> +</span><br><span class="line"><span class="string">&quot;@Configuration class. Add the &#x27;static&#x27; modifier to this method to avoid &quot;</span> +</span><br><span class="line"><span class="string">&quot;these container lifecycle issues; see @Bean javadoc for complete details.&quot;</span>,</span><br><span class="line">beanMethod.getDeclaringClass().getSimpleName(), beanMethod.getName()));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//调用被代理方法</span></span><br><span class="line"><span class="keyword">return</span> cglibMethodProxy.invokeSuper(enhancedConfigInstance, beanMethodArgs);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//用代理对象手动调用@Bean的方法的时候才会走下来</span></span><br><span class="line"><span class="keyword">return</span> resolveBeanReference(beanMethod, beanMethodArgs, beanFactory, beanName);</span><br></pre></td></tr></table></figure><p>这里需要注意的是，我上面写的例子最终是不会走到这个<strong>isCurrentlyInvokedFactoryMethod</strong>条件里面去的，<del>为什么我就先不扩展了，大家如果感兴趣可以去看SimpleInstantiationStrategy#instantiate，如果看不懂可以私聊我</del>，所以我们关注的是这个<strong>resolveBeanReference</strong>方法，这个方法中 关键代码就一句从beanFactory中获取Bean</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Object beanInstance = (useArgs ? beanFactory.getBean(beanName, beanMethodArgs) : beanFactory.getBean(beanName));</span><br></pre></td></tr></table></figure><p>那么这个时候去拿，拿到的就是同一个实例</p><h2 id="用细节来吊打面试官"><a href="#用细节来吊打面试官" class="headerlink" title="用细节来吊打面试官"></a>用细节来吊打面试官</h2><ol><li>为什么createClass返回的是类的反射对象而不是类的实例？</li></ol><p>大家着重看上面<strong>ConfigurationClassEnhancer</strong>中的这段代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Class&lt;?&gt; enhancedClass = createClass(newEnhancer(configClass, classLoader));</span><br></pre></td></tr></table></figure><p><strong>因为这个类我们最终是需要交给Spring来进行管理，所以实例化的工作最终是交给Spring容器来做，而不是cglib来完成</strong></p><ol start="2"><li>isCurrentlyInvokedFactoryMethod(beanMethod)条件是怎么成立的？</li></ol><p>要搞清楚这个问题，我们首先要知道@Bean的对象是如何被Spring实例化的</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 如果有FactoryMethodName属性 <span class="doctag">@Bean</span></span></span><br><span class="line"><span class="comment"> * 这个if成立条件只有2种情况:</span></span><br><span class="line"><span class="comment"> * 1. &lt;Bean&gt; 标签中配置了factory-method属性</span></span><br><span class="line"><span class="comment"> *  2. 方法上面加上了<span class="doctag">@Bean</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">if</span> (mbd.getFactoryMethodName() != <span class="keyword">null</span>) &#123;</span><br><span class="line"><span class="comment">// 反射的方式调用FactoryMethod</span></span><br><span class="line"><span class="keyword">return</span> instantiateUsingFactoryMethod(beanName, mbd, args);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当Spring去实例化Bean的时候会去判断BeanDefinition是否包含FactoryMethod如果是，就会在容器<strong>currentlyInvokedFactoryMethod</strong>中添加</p><p>而<strong>isCurrentlyInvokedFactoryMethod</strong>就是判断容器中的方法是否与目前正在调用的方法一致</p><ol start="3"><li>Spring是如何知道哪些对象需要生成代理对象，哪些不需要？</li></ol><p>这个问题要从2部分出发<strong>判断</strong>、<strong>收集</strong></p><p>我们先来看判断需要生成代理的代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (ConfigurationClassUtils.CONFIGURATION_CLASS_FULL.equals(configClassAttr)) &#123;</span><br><span class="line"><span class="keyword">if</span> (!(beanDef <span class="keyword">instanceof</span> AbstractBeanDefinition)) &#123;</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> BeanDefinitionStoreException(<span class="string">&quot;Cannot enhance @Configuration bean definition &#x27;&quot;</span> +</span><br><span class="line">beanName + <span class="string">&quot;&#x27; since it is not stored in an AbstractBeanDefinition subclass&quot;</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (logger.isInfoEnabled() &amp;&amp; beanFactory.containsSingleton(beanName)) &#123;</span><br><span class="line">logger.info(<span class="string">&quot;Cannot enhance @Configuration bean definition &#x27;&quot;</span> + beanName +</span><br><span class="line"><span class="string">&quot;&#x27; since its singleton instance has been created too early. The typical cause &quot;</span> +</span><br><span class="line"><span class="string">&quot;is a non-static @Bean method with a BeanDefinitionRegistryPostProcessor &quot;</span> +</span><br><span class="line"><span class="string">&quot;return type: Consider declaring such methods as &#x27;static&#x27;.&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">configBeanDefs.put(beanName, (AbstractBeanDefinition) beanDef);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里我们回去判断标记是否为FULL，如果是就会装配进configBeanDefs，然后Spring就会循环configBeanDefs进行<code>enhance</code>增强</p><p>我们再来看Spring是在哪里打的标记（类的位置：ConfigurationClassPostProcessor#processConfigBeanDefinitions）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">List&lt;BeanDefinitionHolder&gt; configCandidates = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"><span class="comment">//获取所有的beanNames</span></span><br><span class="line">String[] candidateNames = registry.getBeanDefinitionNames();</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (String beanName : candidateNames) &#123;</span><br><span class="line">BeanDefinition beanDef = registry.getBeanDefinition(beanName);</span><br><span class="line"><span class="comment">//如果有该表示就不再处理</span></span><br><span class="line"><span class="keyword">if</span> (beanDef.getAttribute(ConfigurationClassUtils.CONFIGURATION_CLASS_ATTRIBUTE) != <span class="keyword">null</span>) &#123;</span><br><span class="line"><span class="keyword">if</span> (logger.isDebugEnabled()) &#123;</span><br><span class="line">logger.debug(<span class="string">&quot;Bean definition has already been processed as a configuration class: &quot;</span> + beanDef);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//判断是否是候选的需要处理的BeanDefinition, 如果是则放入configCandidates容器中</span></span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (ConfigurationClassUtils.checkConfigurationClassCandidate(beanDef, <span class="keyword">this</span>.metadataReaderFactory)) &#123;</span><br><span class="line">configCandidates.add(<span class="keyword">new</span> BeanDefinitionHolder(beanDef, beanName));</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>核心逻辑在<strong>ConfigurationClassUtils.checkConfigurationClassCandidate</strong>中</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//从metadata中获取Configuration注解</span></span><br><span class="line">Map&lt;String, Object&gt; config = metadata.getAnnotationAttributes(Configuration.class.getName());</span><br><span class="line"><span class="comment">//如果有Configuration注解, 就是full匹配标识</span></span><br><span class="line"><span class="keyword">if</span> (config != <span class="keyword">null</span> &amp;&amp; !Boolean.FALSE.equals(config.get(<span class="string">&quot;proxyBeanMethods&quot;</span>))) &#123;</span><br><span class="line">beanDef.setAttribute(CONFIGURATION_CLASS_ATTRIBUTE, CONFIGURATION_CLASS_FULL);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//如果是有Component、ComponentScan、Import、ImportResource或者方法上面有@Bean, 就是lite匹配</span></span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (config != <span class="keyword">null</span> || isConfigurationCandidate(metadata)) &#123;</span><br><span class="line">beanDef.setAttribute(CONFIGURATION_CLASS_ATTRIBUTE, CONFIGURATION_CLASS_LITE);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>将所有的带有Configuration注解的类打上FULL标记</p><blockquote><p>触发时机</p><p>在AbstractApplicationContext的refresh方法中的invokeBeanFactoryPostProcessors方法，它的触发时机是在BeanDefinition初始化结束以后实例化之前完成，这里会去循环调用实现了BeanDefinitionRegistryPostProcessor接口的类</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Spring </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> Spring </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
